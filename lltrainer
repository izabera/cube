#!/bin/bash

colors=(
  # 256 color          24 bit
  $'\e[48;5;231m'  # $'\e[48;2;255;255;255m' # white
  $'\e[48;5;28m'   # $'\e[48;2;0;128;0m'     # green
  $'\e[48;5;196m'  # $'\e[48;2;255;0;0m'     # red
  $'\e[48;5;21m'   # $'\e[48;2;0;0;255m'     # blue
  $'\e[48;5;214m'  # $'\e[48;2;255;165;0m'   # orange
  $'\e[48;5;226m'  # $'\e[48;2;255;255;0m'   # yellow

  $'\e[48;5;243m'  # $'\e[48;2;118;118;118m' # grey
)

display () {
  declare -n f=faces c=colors
  printf '      %s  %s  %s  \e[m\n'                                                                           "${c[f[ 0]]}" "${c[f[ 1]]}" "${c[f[ 2]]}"
  printf '      %s  %s  %s  \e[m\n'                                                                           "${c[f[ 3]]}" "${c[f[ 4]]}" "${c[f[ 5]]}"
  printf '      %s  %s  %s  \e[m\n'                                                                           "${c[f[ 6]]}" "${c[f[ 7]]}" "${c[f[ 8]]}"
  printf '%s  %s  %s  %s  %s  %s  %s  %s  %s  %s  %s  %s  \e[m\n'  "${c[f[36]]}" "${c[f[37]]}" "${c[f[38]]}"  "${c[f[ 9]]}" "${c[f[10]]}" "${c[f[11]]}"  "${c[f[18]]}" "${c[f[19]]}" "${c[f[20]]}"  "${c[f[27]]}" "${c[f[28]]}" "${c[f[29]]}"
  printf '%s  %s  %s  %s  %s  %s  %s  %s  %s  %s  %s  %s  \e[m\n'  "${c[f[39]]}" "${c[f[40]]}" "${c[f[41]]}"  "${c[f[12]]}" "${c[f[13]]}" "${c[f[14]]}"  "${c[f[21]]}" "${c[f[22]]}" "${c[f[23]]}"  "${c[f[30]]}" "${c[f[31]]}" "${c[f[32]]}"
  printf '%s  %s  %s  %s  %s  %s  %s  %s  %s  %s  %s  %s  \e[m\n'  "${c[f[42]]}" "${c[f[43]]}" "${c[f[44]]}"  "${c[f[15]]}" "${c[f[16]]}" "${c[f[17]]}"  "${c[f[24]]}" "${c[f[25]]}" "${c[f[26]]}"  "${c[f[33]]}" "${c[f[34]]}" "${c[f[35]]}"
  printf '      %s  %s  %s  \e[m\n'                                                                           "${c[f[45]]}" "${c[f[46]]}" "${c[f[47]]}"
  printf '      %s  %s  %s  \e[m\n'                                                                           "${c[f[48]]}" "${c[f[49]]}" "${c[f[50]]}"
  printf '      %s  %s  %s  \e[m\n'                                                                           "${c[f[51]]}" "${c[f[52]]}" "${c[f[53]]}"
}

declare -A moves=(
  [L]="0-35-45-9 3-32-48-12 6-29-51-15 36-42-44-38 37-39-43-41"
  [R]="2-11-47-33 5-14-50-30 8-17-53-27 18-24-26-20 19-21-25-23"
  [F]="6-44-47-18 7-41-46-21 8-38-45-24 9-15-17-11 10-12-16-14"
  [B]="0-20-53-42 1-23-52-39 2-26-51-36 27-33-35-29 28-30-34-32"
  [U]="9-18-27-36 10-19-28-37 11-20-29-38 0-6-8-2 1-3-7-5"
  [D]="15-42-33-24 16-43-34-25 17-44-35-26 45-51-53-47 46-48-52-50"
)

domove () {
  local IFS=-
  while (( $# )); do
    cycles=($1)
    buffer=${cycles[0]} tmp=${faces[buffer]} current=$buffer
    for i in "${cycles[@]:1}"; do
      faces[current]=${faces[i]}
      current=$i
    done
    faces[current]=$tmp
    shift
  done
}

apply () {
  while (( $# )); do
    case $1 in
      *"'") domove ${moves[${1::1}]} ;&
      *2)   domove ${moves[${1::1}]} ;&
      *)    domove ${moves[${1::1}]} ;;
    esac
    shift
  done
}

timer () {
  read -rsp 'press enter to start '

  t=0
  while :; do
    read -rsn 1 -t .01 -p $'\e[K' && break
    ((t++))
    printf "\r%d.%02d\e[K" "$((t/100))" "$((t%100))"
  done
  while read -rst .1 -p $'\e[K'; do :; done
  echo
}

trap 'tput rmcup; tput cnorm' exit
tput civis
tput smcup
clear

[[ $1 = ll || $1 = -ll || $1 = --ll ]]
ll=$((!$?))
(( ll )) && file=timesll || file=times


while :; do
  printf '\e[H'

  mapfile -t latest < <(tail -5 times 2>/dev/null)
  printf "latest 5: %s %s %s %s %s\e[K\n" "${latest[@]}"
  tmp=(${latest[@]//.})
  max=$((10#${tmp[0]})) min=$max sum=$max
  for i in "${tmp[@]:1}"; do
    i=$((10#$i))
    (( max = max > i ? max : i ))
    (( min = min < i ? min : i ))
    (( sum += i ))
  done
  (( sum = sum - max - min ))
  (( sum /= 3 ))
  if (( ${#latest[@]} == 5 )); then
    printf "ao5: %d.%02d\n" "$((sum/100))" "$((sum%100))"
  fi
  
  if (( ll )); then
    faces=(
      5{,,}{,,}
      1{,,} 6 1 6{,,,}
      4{,,} 6 4 6{,,,}
      3{,,} 6 3 6{,,,}
      2{,,} 6 2 6{,,,}
      6{,,} 6 0 6{,,,}
    )
    alg=$(shuf -n1 ./ll-scramble.txt)
  else
    faces=({0..5}{,,}{,,})
    # fixme: this will never generate L R
    letters=(U F R D B L)
    old=$((RANDOM%6))
    alg=
    for i in {1..25}; do
      while :; do
        move=$((RANDOM%6))
        (((move%3) != (old%3))) && break
      done
      old=$move
      alg+=${letters[move]}
      case $((RANDOM%3)) in
        1) alg+=2;;
        2) alg+="'";;
      esac
      alg+=' '
    done
  fi
  
  echo "$alg" $'\e[K'
  
  apply $alg
  display

  timer
  printf "%d.%02d\n" "$((t/100))" "$((t%100))" >> "$file"
done
